#! usr/bin/python3

import sys
from PyQt5.QtWidgets import QWidget, QApplication
# 这里引入了PyQt5.QtWidgets模块，这个模块包含了基本的组件。

if __name__ == '__main__':
    # 创建QApplication的实例,每个PyQt5应用都必须创建一个应用对象。
    # sys.argv是一组命令行参数的列表。Python可以在shell里运行，
    # 这个参数提供对脚本控制的功能。
    app = QApplication(sys.argv)
    # 创建一个窗口
    # QWidge控件是一个用户界面的基本控件，它提供了基本的应用构造器。
    # 默认情况下，构造器是没有父级的，没有父级的构造器被称为窗口（window）。
    w = QWidget()
    # 设置窗口的尺寸
    # resize()方法能改变控件的大小，这里的意思是窗口宽400px，高200px。
    w.resize(400,200)
    # 移动窗口
    # move()是修改控件位置的的方法。它把控件放置到屏幕坐标的(300, 300)的位置。
    # 注：屏幕坐标系的原点是屏幕的左上角。
    w.move(300,300)
    # 设置窗口的标题
    # 我们给这个窗口添加了一个标题，标题在标题栏展示（
    # 虽然这看起来是一句废话，但是后面还有各种栏，还是要注意一下，多了就蒙了）。
    w.setWindowTitle("第一个基于PyQt5的桌面应用")
    # 显示窗口
    # show()能让控件在桌面上显示出来。控件在内存里创建，之后才能在显示器上显示出来。
    w.show()
    # 进入程序的主循环，并通过exit函数确保主循环安全结束
    # 最后，我们进入了应用的主循环中，事件处理器这个时候开始工作。主循环从窗口上接收事件，
    # 并把事件传入到派发到应用控件里。当调用exit()方法或直接销毁主控件时，主循环就会结束。
    # sys.exit()方法能确保主循环安全退出。外部环境能通知主控件怎么结束。
    # exec_()之所以有个下划线，是因为exec是一个Python的关键字。
    sys.exit(app.exec_())
